---

layout: post

title:  "Chapter 09. 스레딩과 동기화 성능"

date:   2018-09-15 21:30:28 +0900

categories: java performance tuning

---

 

### 스레드 풀과 ThreadPoolExecutors

- 서버를 호출한 각 서블릿은 스레드 풀의 각각의 스레드로 작업을 제어한다. 자바 애플리케이션은 병렬로 작업을 수행할수 있도록 자바의 ThreadExecutor를 사용한다.

- 스레드 풀을 사용하는데 이어 최적의 성능을 내는데 결정적인 부분은 풀의 크기 튜닝이다.

- 각각의  테스크들은 테스크 큐에 쌓여있으며 가용스레드들이 이 테스크 큐를 확인하며 테스크가 있으면 테스크를 가져가서 작업하고 테스크가 없으면 대기상태로 머무른다.

 

### 스레드의 최대 개수 설정하기

- 스레드 풀의 적정크기는 CPU 가용률을 극대화 시키는 만큼이다.

- 클라이언트와 서버간의 관계를 생각해서 서버가 받아들일수 있을만큼의 요청(병목이 생기지 않을만큼) 스레드 수를 조절하고 서버도 그에 맞추어 스레드의 갯수를 조절해야 된다. 병목이 발생할 만큼의 스레드 갯수를 더해봐야 서버에 부하가 더해져서 성능은 더 나빠진다.

- 스레드풀의 크기를 조절하는게 어려운 이유는 병목환경이 발생할 수 있는 전체 환경측면에서의 가시성 (데이터베이스 접근, 파일 I/O, ...etc)이 눈에 보이지 않기 때문이다.

 

### 스레드의 최소 개수 설정하기

- 가용 스레드를 유지하는건 애플리케이션에 영향을 전혀 주지 않는다. 스레드가 스레드 로컬 스토리지를 보유하거나 스레드의 runnable객체가 많은 양의 메모리를 참조하고 있는 경우가 아니면 스레드 객체 자체가 아주 많은 힙 공간을 필요로 하지 않는다.

- 스레드 풀을 위한 테스크 큐의 크기만큼의 최소 스레드를 설정하면 테스크 큐에 쌓여있는만큼의 일을 스레드가 처리하므로 최소 크기로 삼기 적당하다.

 

### 스레드 풀 테스크 크기

- 테스크 큐가 너무 크고 스레드 풀의 크기가 너무 작으면 테스크가 너무 오래 기다리는 일이 생길수 있기때문에 스레드풀은 대기 테스크 큐의 크기를 제한한다.  크기의 제한은 ThreadPoolExecutor는 설정되는 데이터 구조에 따라 다양한 방법으로하며 이 값을 실제로 설정하기 위한 유일한 방법은 실제 애플리케이션을 측정하는것이다.

 

### ThreadPoolExecutor 크기 설정하기

- ThreadPoolExecutor는 테스크를 유지하는데 사용하는 큐의 타입에 따라 신규 스레드를 시작할 시기를 결정한다.

 

1. 동기식 큐

> 기존스레드가 테스크 큐를 처리하느라 모두 바쁘고 풀에는 최대개수보다 적은 스레드가 있다면 신규 테스크는 새 스레드를 시작한다.

> 하지만 테스크가 도착했을때 최대 개수의 스레드가 이미 작업 중이라면 테스크는 거부된다. 따라서 적은 수의 테스크를 관리하는데는 동기식 큐가 좋지만 그렇지 않을때는 적합하지 않은 방법이다.

 

2. 무한 큐

> Executor가 무한큐를 사용할때는 거부되는 테스크는 없을것이며 최대 풀크기가 무시되고 전통적인 풀의 동작에 가까워지게 된다.

 

3. 제한된 큐

> 새 스레드를 시작할 시기를 결정할 때 꽤 복잡한 알고리즘을 쓴다. 추가 스레드는 큐가 가득찼을때만 시작되고 신규 테스크가 큐에 들어간다. 큐 안에 적당한 개수의 테스크가 실행되도록 대기하고 있더라도 풀은 대부분의 시간에 핵심 스레드로만 동작한다는 점이다.

 

### ForkJoinPool

- 자바7부터 ForkJoinPool클래스라는 새로운 스레드 풀을 도입한다. ForkJoinPool 클래스는 테스크를 재귀적인 부분집합으로 나누어 해결하는 분할정복식 알고리즘을 사용하도록 설계되었다. 이 부분집합은 병렬로 처리될 수 있고 각 부분집합의 결과는 단일 결과로 합쳐진다.

- 분할정복식 알고리즘은 많은 테스크를 적은 스레드로 처리해야 된다는 점이다. 또 다른 주요사항으로는 분할 알고리즘의 특성상 부모테스크는 자식 테스크가 완료될 때까지 대기해야하므로 ThreadPoolExecutor보다 ForkJoinPool이 더 적절하다.

- ThreadPoolExecutor내의 스레드는 다른 테스크를 큐에 추가할 수 없고 작업이 끝나기를 기다리고 있으며일단 스레드가 대기하고 있으면 하위 테스크 중 하나를 실행하는데 사용할 수 없다. 반면에 ForkJoinPool은 스레드가 신규 테스크를 생성하고  현재의 테스크를 대기 시키도록하며 테스크 처리가 유예된 동안 스레드는 다른 대기 테스크를 실행 시킬수 있다.

- ForkJoinPool은 ThreadPoolExecutor에 비해 메모리를 많이 사용하므로 연산에 따라 GC가 발생하는 많은 연산을 수행하는 경우에는 TreadPoolExecutor를 사용하는것이 더 유리하다.

- 풀 안에 단일 스레드가 있으면 근본적으로 계산에는 동일한 시간이 걸리지만 풀에 스레드가 네개 있으면 ForkJoinPool내의 테스크 세분화가 더 잘 일어난다.

 

### 스레드 동기화

- 동기화의 의미는 일련의 변수에 접근하는 블록 내의 코드가 '직렬화'가 되어 있다는 의미이며 한번에 하나의 스레드만이 메모리에 접근할 수 있다는 의미이다. 동기화의 목적은 메모리 내의 값, 즉 변수에 대한 접근을 보호하는 것이다.

- 동기화에는 자원에 대한 배타적 접근이 필요한 반면 원자 단위 클래스는 '비교 후 교환(CAS)'이라는 CPU명령어를 이용한다.  동기화 락이 필요한 스레드는 다른 스레드가 자원을 쓰고 있으면 차단하는 반면 CAS 명령어를 이용하는 스레드는 동시에 동일한 자원에 접근할때 차단하지 않는다.

*비교후 교환- 연산시 메모리 주소와 레지스터 두 개를 이용해서 메모리 내의 내용을 레지스터와 비교후 동일하면 그 내용을 레지스터와 교환한다.*

 

### 객체를 락하는 비용

- 각각의 CPU는 각각의 CPU캐시를 가지고 있는데 volatile변수를 사용하면 각각의 캐시가 아닌 메인메모리에 값을 사용하므로 다른 스레드와 공유변수로서 사용할수 있다. 하지만 스레드간의 시점마다 값이 변경될 수 있으므로 쓰려는 값은 레지스터에 임시로 넣어두고 사용하려는 스레드들이 필요한 시점에 값을 확인한 후 레지스터에 있는 쓰려는 값을 flush한다.(동기화 된다)

 

### 동기화 피하기 

- 각 스레드에서 다른 객체를 사용해서 객체에 접근하는 것에 대해 경쟁하지 않도록 하는것이다. 스레드 로컬 변수를 사용함으로써 객체의 총개수는 제한되고 각 객체는 스레드 경쟁의 대상이 되지 않을 것이다. 동기화를 피하는 두번째 방법은 CAS기반 대체품을 사용하는 것이다. 실제 애플리케이션에서 스레드 두개가 항상 동시에 공유 자원에 접근할 가능성은 매우 낮다.

 

### 거짓 공유

- 별도의 스레드들이 있고 이들끼리 변수를 공유하고 있지만 공유변수로 선언한 코드가 있다면 캐시에 넣고 뺄수 있는 값들을 무효화하기 때문에 스레드들을 추가할때마다 성능이 나빠질 수 있다. 따라서 거짓 공유에는 동기화된(또는 volatile)변수를 포함시킬 필요가 없다.

- 거짓변수를 감지하기 위한 프로그램을 사용하여(인텔의 VTune) 거짓공유를 회피하거나 자바8의 @Contented 어노테이션을 이용해서 특정 필드에서 캐시 경쟁을 줄 일 수 있다.

 

### 스레드 스택 크기 튜닝하기

- 스레드의 스택은 각 운영체제의 bit별로 기본 설정값이 정해져 있으며 호출 스택이 매우 커져서 기본 설정값을 넘길 경우 StackOverFlow가 발생할 수 있다.

- 스레드에 대한 스택크기를 변경하려먼 Xss=N을 이용해서 변경할 수 있다.

 

### 편향된 락

- 보통은 각 스레드에서 락이 경쟁이 일어나면 라운드 로빈 방식으로 공평하게 락이 부여되지만 가장 최근에 락에 접근한 스레드가 있다면 편향되게  그 스레드에 먼저 락을 부여할 수 있다. 그 스레드가 최근에 락을 사용했다면 다음에 동일한 락에 의해 보호된 코드가 실행될때 스레드가 필요로 하는 데이터가 여전히 캐시에 남아 있을 가능성이 놓으므로 캐시에 히트할 가능성이 높기 때문이다. 보통의 애플리케이션에서는 편향된 락은 활성화 되어 있다.

 

### 스레드 가시성

- 대부분의 JVM모니터링 도구는 스레드의 개수와 상태에 대한 정보를 제공해주며 jconsole의 threads 패널에서는 프로그램이 실행되는 동안 스레드의 증감상황을
실시간으로 볼 수 있다. 다만 스레드가 하는 일에 대한 데이터는 실제로 제공해 주지 않으므로 스레드가 CPU 주기를 소비하는 위치를 찾아내려면 프로파일러를 사용해야 한다.

 
Link : http://thswave.github.io/java/2015/03/08/java-volatile.html

