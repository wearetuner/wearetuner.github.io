---

layout: post

title:  "Chapter 10. 자바 엔터프라이즈 에디션 성능"

date:   2018-11-02 21:30:28 +0900

categories: java performance tuning

---

 
 

 

### 기본 웹 컨테이너 성능

 

- 출력물을 적게 생성하자 -> 웹 페이지가 브라우저에 도착하는 시간이 빨라진다.

 

- 여백을 줄이자 -> 공백이 있는만큼 네트워크로 전송되는 시간이 더 걸린다.

 

- CSS와 자바스크립트 자원을 결합하자 -> 몇개의 작은 파일보다 더 큰 파일 한개를 보내는 편이 더 효율적이다.

 

- 출력물을 압축하자 -> HTML데이터를 압축해 zip이나 gzip의 형태로 브라우저로 전송된다.

 

- 동적 JSP 컴파일을 사용하지 말자 -> 페이지를 반영할때마다 변경사항을 반영하기 위해 서버는 JSP를 다시 로드 할 필요가 있을지 여부 확인한다.

 

- 최적화에 대한 테스트는 로컬에서만 하는게 아니라 실제 운영환경(LAN, 광대역, 공용 WI-FI,...)에서도 시뮬레이션 해보아야 한다.

 

 

### 문자열을 미리 인코딩 해야 하는가?

 

- JSP 페이지 내의 HTML 문자열을 미리 인코드 할지는 서버에 따라 달라지며 일부 서버는 옵션으로, 일부는 자동으로 인코딩 해준다.

 

- 인코더 설정을 자주 호출하는건 비용이 비싸므로 작은 문자열을 자주 인코딩해서 플러시를 하는것보다 긴 문자열을 한번 인코딩해서 플러시 하는편이 더 낫다.

 

 

### HTTP 세션 상태

 

- 세션 상태는 애플리케이션 서버의 성능에 중요한 영향을 미친다.

 

- 세션 상태가 가비지 컬렉터에 미치는 영향을 줄이려면 가능한 한 세션 상태의 데이터를 적게 유지하고 가능한 빨리 세션을 만료시킨다.

 

- 힙 밖으로 오래된 세션 데이터를 이동하려면 애플리케이션 서버에 특화된 튜닝방법을 확인하자.

 

- 고사용성을 이용할 때 반드시 애플리케이션 서버가 변경된 속성만 복제하도록 설정하자.

 

 

#### HTTP 세션 상태 메모리

 

- HTTP 세션시간을 너무 길게 설정해두면 세션 상태 데이터로 메모리 힙을 가득 채우기 쉽다. 이럴경우 GC가 자주 수행되면 여러가지

이슈가 발생될 수 있다. (메모리에 세션 상태가 오래 있게 되고 메모리가 모자라면 이 정보를 디스크나 원격 캐시에 저장 될 수 있으므로 다시 로드할때

오랜 시간이 걸릴수 있다) 따라서 비즈니스 성격별로 이용자의 이용 패턴을 분석하여 세션 유지 상태를 설정해 두는것을 권장한다.

 

 

#### 고가용 HTTP 세션 상태

 

- 세션 상태 내의 저장된 객체의 값이 변경될 때마다 setAttribute() 메서드를 호출하고, 반드시 애플리케이션 서버는 변경된 데이터만 복제하도록 설정하자.

 

 

### 스레드 풀

 

- 애플리케이션 서버에는 보통 한개 이상의 스레드 풀이 있다. 서블릿 요청을 제어하는 용도, 원격 EJB 요청을 제어하는 용도, 자바 메시지 서비스(JMC)

요청을 제어하는 용도 등이 있다.

 

- 개별 스레드 풀은 애플리케이션 서버 내에서 다른 트래픽에 제한된 우선순위를 설정할 수 있게 해준다.

 

 

### 엔터프라이즈 자바 세션 빈

 

- EJB는 풀로 관리 되지 않는다면 7단계의 라이프 사이클을 거치며 풀로 관리되면 앞의 6단계는 건너뛰고 비즈니스 메서드만 실행시키면 된다.

 

- EJB 안에 애플리케이션이 필요한 만큼의 객체가 없으면 객체를 전체 라이프 사이클을 통해 생성할 것이다.

 

- 애플리케이션 서버마다 EJB 풀을 튜닝하는 방식은 다르지만 일반적인 경우 각 EJB 풀에 대해 글로벌 설정을 두고 다르게 설정해야 하는 개별 EJB는

이걸 오버라이드 한다. 개별 빈의 풀 크기는 sun-ejb-jar.xml 파일 안에서 설정할 수 있다.

 

- 크기가 너무 큰 EJB 풀을 생성하는데 따른 불이익은 보통 그렇게 크지 않다. 풀내의 미사용 인스턴스는 gc가 그다지 효율적이지 않다는걸 의미하지만 

일반적으로 풀 크기는 매우 작아서 미사용 인스턴스가 큰 영향을 미치지 않는다.

 

- EJB 풀은 일반적으로 고정적이며 최대 크기를 가진다. 두 값은 특정 환경에서는 튜닝해야 하지만 가비지 컬렉터에 대한 장기간의 영향을 최소화하려면 고정 크기가 더 중요하다.

 

 

### EJB 캐시 튜닝하기

 

- 메모리를 절약하기 위해 애플리케이션 서버는 빈의 상태를 직렬화하여 디스크에 저장할 수 있다.

이러한 경우 성능상의 불이익이 생기게 되며 대부분의 경우 가장 회피해야 될 경우이다.

 

- 세션에 할당된 상태 유지 빈은 EJB 풀 내에 없으며 이들은 EJB 캐시 내에 있다. 따라서 EJB 캐시를 튜닝할 때 애플리케이션에서

계속 활성화 되리라고 예상되는 세션의 최대 개수를 유지하기 충분할 정도로 캐시를 크게 만들어야 한다.

 

- EJB 풀과 캐시의 크기로 사용할 값을 알기 위해서는 EJB 풀 모니터링을 사용한다.

 

 

### 로컬과 원격 인스턴스

 

- EJB와 서블릿이 물리적으로 같은 곳에 위치한다면(동일 서버) 서블릿은 EJB로 접근하는데 로컬 인터페이스를 사용하고 EJB와 서블릿이 물리적으로

같은 곳에 있지 않으면 원격 인터페이스를 사용한다. 원격 인터페이스를 사용한다는 의미는 네트워크 호출을 사용한다는 의미이므로 전달하고, 받는

인자의 형태가 기본형과 참조형이 이난 '값(String)'으로 전달되어야 한다. 이때 직렬화와 역직렬화가 발생하게 되므로 항상 로컬인터페이스를 통해

전달되는것보다 느려딘다.

 

 

### XML과 JSON 처리

 

- 자바EE는 JAX-WS스택을 이용한 전면 웹 서비스 호출, JAX-RS를 이용한 RESTful호출, 단순한 형태의 자체 HTTP호출까지 다양한 종류의 

HTTP기반 데이터 전송자를 지원한다. 이 API들의 공통적인 기능은 텍스트 기반 데이터 전송자를 이용하며 데이터 표현 방식은 많이 다르지만

XML과 JSON은 자바에서 처리되는 방법 측면에서는 유사하며 처리에 따른 성능상의 고려 사항도 유사하다.

 

- 같은 내용의 데이터라도 JSON형태는 XML형태의 문서보다 사이즈가 훨씬 작으며 XML형태는 공백을 줄이더라도 JSON보다 데이터의 크기가 크다.

어떤 표현 방식이든 데이터를 압축하면 크기가 비슷해지므로 HTTP데이터로 전송할때 데이터를 압축해 이익을 볼 수 있도록 하자.

 

 

### 파싱과 마샬링 개요

 

- 데이터를 다루는 일반 기술로 네 가지가 있다. 이들중 사용할 기술을 선택할 때 주요 기준은 애플리케이션이 작성되어야 하는 방식에 따라 결정한다.

 

- 아래의 순서는 느린것에서 빠른 순서로 나열한 것이다.

 

** 토큰파서 

파서는 입력 데이터의 토큰을 살펴보다가 해당 토큰을 발견하면 객체로 메서드를 다시 호출한다.

 

** 풀 파서

입력데이터는 파서와 관련 있고 프로그램은 파서에서 일련의 토큰을 요청한다.

 

** 도큐먼트 모델

입력 데이터는 애플리케이션이 데이터를 찾으면서 살펴볼 수 있도록 도큐먼트 형태의 객체로 변환된다.

 

** 객체 표현 방식

입력 데이터는 데이터의 구조를 반영하는 일련의 기정의된 클래스를 사용하는 한개 이상의 자바 객체로 변환된다.

 

 

### 파서 선택하기

 

** 풀 파서

- 풀 파서는 요구할 때마다 스트림에서 데이터를 조회하며 읽어드린 문서의 키워드를 통해 토큰을 반환한다. XML파서와 JSON파서는 동일한 방식으로

동작하며 일부 API 호출만 바뀐다. 풀파서의 성능은 XML파서보다 JSON파서가 더 빠른다.

 

** 푸시 파서(SAX)

- XML 표준 파서는 SAX파서이다. 데이터를 읽다가 토큰을 찾으면 그 토큰을 처리할 클래스 일부에 대해 콜백을 수행한다.

- XML 푸시 파싱 프레임워크는 파싱이 멈췄다는 사실을 예외 발생이 감지할 수 있는 유일한 방법이다.

- SAX파서는 StAX파서보다 더 빠른 경향이 있다. 하지만 개발에 더 용이한 파서를 선택하여야 된다.

 

** 대체 파싱 구현체와 파서 팩토리

- JDK는 XML파서의 참조구현체를 제공하고 JSON-P프로젝트는 JSON 파서의 참조 구현체를 제공한다.

- 파서는 파서 팩토리를 통해 얻을수 있으며 다른 파서 구현체를 이용하면 원하는 파서의 인스턴스를 반환해주는 파서 팩토리를 구성한다

- 팩토리를 생성하는 비용은 비싸므로 글로벌 참조를 통해 팩토리를 재사용하게 하고 실제 파서는 호출 사이 reset()메소드를 호출하여 파서를

재사용 하도록 하는편이 낫다.

- XML팩토리는 사용할 팩토리를 찾기위해 시스템속성, properties에 명기된 속성, 클래스패스에 설정된 속성 등으로 팩토리를 검색하는데

팩토리가 생성될때마다 검색이 반복되므로 초기화는 매우 비용이 비싸다. 디폴트 팩토리라 하더라도 클래스패스에 설정된 팩토리를 찾는 순서가 먼저라서

검색한 후 디폴트 팩토리를 찾기때문에 성능에 영향을 준다.

-JSON팩토리는 JSON구현체의 클래스명을 포함한 javax.json.spi.JsonProvider명칭을 갖고 있는 파일을 명시하여 META-INF/services경로를 사용해서

하나 생성하는 것이다. JSON팩토리를 조회할 때 전체 클래스패스를 검색하는걸 피할수 없다.

-대체 파서중 StAX중 Woodstox StAX파서, JSON파서는 잭슨 JSON 파서가 기본 파서보다 성능이 더 빠르다.

 

 

### XML검증

 

- XML파일을 검증하기 위해(콘텐츠의 존재 유무, 닫기 태그 작성 등등) 구조가 틀린 도큐먼트를 파서가 거부하도록 허용하여 필요로 하는 정보 일부가 누락되거나

예상치 못한 정보를 포함할 수 있게 한다. 

 

- XML검증은 스키마나 DTD파일에 대해 이뤄지는데 검증하기위해 로드되는 스키마 파일의 위치는 성능 이슈의 주요 원인이 될 수 있으므로 네트워크를

통하는것이 아닌 애플리케이션 서버와 같은 위치에 두어 로컬에서 로드 되도록 한다.

 

 

### 문서 모델

 

- 문서객체모델(DOM)이나 JSON객체를 빌드하는 건 상대적으로 단순한 호출로 이루어 진다. 객체 자체는 기본 파서로 생성되므로 최고의 성능을 위한

파서를 구성하는 것이 중요하다.(DOM의 경우 StAX파서가 디폴트로 사용된다)

 

- DOM객체는 DocumentBuilder객체로 생성되며 JSON객체는 Json객체에서 직접 반환하거나 객체에서 반환된 JsonReader객체로 생성된다.

 

 

### 자바 객체 모델

 

- 문자 데이터를 다루는데 있어 한가지 방법은 파싱될 데이터에 대응되는 자바 클래스를 생성하는 것이다. JSON에서는 JSR제안서가 있으며 XML에는 JAXB를 이용한다.

JAXB는 기본 StAX를 이용하며 생성된 자바 객체는 Unmarshaller객체를 생성하면서 만들어 진다.

 

- JAXBContext는 생성하는 비용이 비싸므로 한번 생성해서 재사용 하도록 하는편이 나으며 Unmarshaller객체는 thread-safe하게 접근이 안되므로 각 스레드마다

생성되게 하는 것이 성능에 더 낫다.

 

- JAXB를 통해 객체를 생성하면 DOM문서를 생성하거나 파싱하는것보다 비용이 더 많이 든다.

 

### 객체 직렬화

 

- XML,JSON과 유사 텍스트 기반 포맷은 다른 종류의 시스템끼리 데이터를 교환하는데 유용하며 일반적으로 데이터는 객체가 직렬화된 상태로 전송해서 프로세스끼리 교환된다.

이때 바이트 단위로 분해해서 네트워크로 전송하기위한 Serializable을 구현한 객체형태로 전송하며 불필요한 전송 데이터는 transient로 처리한 뒤 전송한다.

 

- 객체 데이터를 직렬화, 역직렬화로 최적화 하는 일을 섣불리 해서는 안된다. 예를들어 배열과 같은 객체참조에 대해서는 특별한 처리를 수행해야 되며 정확하게 작업하면

직렬화 성능을 크게 높일수 있지만 틀리게 하면 미묘한 버그를 발생하게 할 수 있다.

 

- 네트워크를 전송할 객체를 압축,압축 해제를 통해 전송시 주고받는 데이터를 압축해서 데이터의 양과 시간을 효과적으로 줄일수 있다. (코드 p434참조) 전송객체의 압축 푸는데

시간이 많이 걸린다면 필요할때 압축을 풀어 시간을 줄이도록 하자. 직렬화의 요점이 네트워크를 통해 데이터를 전달하는 것이라면 압축은 데이터가 저장되는 시간에 도움이 된다.

 

 

 

### 중복 객체 추적하기

 

- TreeMap과 같은 클래스형태를 직렬화, 역직렬화 할때는 재귀적으로 노드를 호출하는데 이미 직렬화, 역직렬화를 마친 부모 노드는 이미 작업을 한것으로 인지하고 다시 쓰지 않는다.

 

 

### 데이터 전송 크기 변경하기

 

- 데이터 전송의 양은 압축이나 문서의 축소 또는 다른 어떠한 기술을 이용해서는 최소화 시키는 편이 낫다. 또 네트워크 인터페이서는 비용이 많이 드는 일이므로 호출 한번에 많은

데이터가 반환되는 편이 좋다. 하지만 데이터를 송,수신하는데 목적에 맞게 데이터를 구성해야 하므로 데이터의 양과 구하려는 데이터의 목적에 대해 균형을 찾는것이 중요하다.

 

- RESTful요청시 데이터의 양에 따라 전송 응답시간이 늘어남을 확인 할 수 있다. 따라서 클라이언트는 필요한 RestAPI를 정확히 파악하여 서버에 요청하며 불필요한 데이터를 많이

반환하지 않도록 한다.

 

- 네트워크는 점점 빨라짐에 따라 사실상 데이터 전송크기에 따른 트레이드 오프가 점점 덜 중요해진다.