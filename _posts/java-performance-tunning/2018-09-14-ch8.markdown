---
layout: post
title:  "Chapter 08. 네이티브 메모리 베스트 프랙티스"
date:   2018-09-14 20:19:28 +0900
categories: java performance tuning
---

# _JVM의 전체 차지 공간에 의한 운영체제의 성능에 대하여 알아보!_

## 1. 차지 공간
  네이티브 메모리란 JVM이 사용하는 메모리 중 heap이 아닌 메모리 영역이며, JVM이 사용하는 네이티브와 heap 메모리의 합은 어플리케이션이 차지하는 영역의 총합이다.
  대부분의 경우 최적의 성능을 위해서는 모든 자바 프로세스가 차지하고 있는 공간의 총합이 머신의 물리 메모리보다 크지 않아야 한다.

  - # 차지 공간 측정하기
``` bash
unix: top/ ps
window: perfmon/ VMMap
```
   `-Xms512m -Xmx2048m` : 이 매개변수는 힙 시작시 512MB를 예약 후 힙의 크기가 늘어날때 이에 상응하여 메모리도 2G까지 늘어남을 의미한다.

  - # 차지 공간 최소화하기
    튜닝 관점에서 JVM의 차지 공간은
    힙(GC 튜닝 매개 변수로 최대 힙 설정), 스레드 스택, 코드 캐시, 다이렉트 바이트 버퍼의 요소들이 사용하는 네이티브 메모리의 양에 영향을 받을 수 있다.

  - # 네이티브 NIO 버퍼
    네이티브 NIO 버퍼에 데이터를 쓰고 나서 파일이나 소켓 채널로 데이터를 보내면 버퍼의 내용을 복사할 필요가 없지만 힙 바이트 버퍼를 사용하면 JVM 복사가 필요하다.
    다이렉트 바이트 버퍼에 할당 할 수 있는 메모리의 총 크기는 `-XX:MaxDirectMemorySize=N` 으로 명시할 수 있다.
    자바 7부터 이 플래그의 디폴트 값은 0이며, 이것은 무제한이라는 의미이다.

  - # 네이티브 메모리 추적
  - ##### 자바 8부터 `-XX:NativeMemoryTracking=off|summary|detail` 옵션이 제공되며, 기본 Native Memory Tracking(NMT)는 꺼져있다.

``` bash
  % jcmd process_id VM.native_memory summary
```
  - ##### 전체 committed size: 프로세스가 소비할 물리 메모리의 실제 크기.
  - ##### 개별 committed size: 힙, 코드캐시, 메타스페이스의 영역이 과하게 할당되어 있어도 메모리 예약에는 영향이 없긴 하지만, 이 영역의 튜닝이 필요 할때 각 영역의 실제 사용 메모리를 참고할 수 있다.

``` bash
  % jcmd process_id VM.native_memory baseline
```
  - ##### NMT를 활성화하고 JVM을 시작 한 후 위 명령어를 통하여 메모리 사용량에 대한 기준점을 설정 할 수 있다.


``` bash
  % jcmd process_id VM.native_memory summary.diff
```
  - ##### 시간이 지남에 따라 JVM의 메모리 할당 정보를 얻을 수 있다.


## 2. 운영체제를 위한 JVM 튜닝

  - # Large Page
    페이지는 운영체제가 물리 페이지를 관리하는 메모리 단위이며, 운영체제 할당의 최소 단위이다.

    어드레스 공간의 페이지는 swap 공간을 왔다갔다하며 이동하는데 모든 페이지 매핑은 글로벌 페이지 테이블에서 이뤄지며, Translation Lookaside Buffer(TLB)가 가장 자주 사용된다.
    머신은 제한된 개수의 TLB를 가지고 있으므로, 각 페이지에 메모리를 더 많이 쓰면 전체 프로그램을 포함하는데 있어 TLB 항목은 더 적게 사용하며 해당 페이지가 TLB 내에 있을 가능성이 높아지므로 튜닝 포인트가 될 수 있다.

    `-XX:+UseLargePages` 플래그로 Large page 기능을 지원한다.

    #### 리눅스
    - ##### `# grep Hugepagesize /proc/meminfo` 확인
    - ##### `# echo PAGE_COUNT > /proc/sys/vm/nr_hugepages` 페이지 개수 설정
    - ##### /etc/sysctl.conf 에 sys.nr_hugepages=2200 리부팅 후에도 유지되도록 설정
    - ##### /etc/security/limits.conf 파일에 사용자 할당 메모리를 설정 후 재 로그인
      ##### user soft memlock 4613734400
      ##### user hard memlock 4613734400
    - ##### `# java -Xms4G -Xmx4G -XX:+UseLargePages -version` 동작 확인


    #### 리눅스 v2.6.32
      /sys/kernel/mm/transparent_hugepage/enabled 내용 변경으로 설정 가능하다.

    - ##### `# cat /sys/kernel/mm/transparent_hugepage/enabled`
      ##### default madvise: huge page를 사용할 커널이 명시된 프로그램에서만 huge page를 사용함.
    - ##### `# echo always > /sys/kernel/mm/transparent_hugepage/enabled`
      ##### default 값 변경. 시스템 내에서 실행되는 모든 프로그램에서 huge page 사용하도록.
    - ##### `# cat /sys/kernel/mm/transparent_hugepage/enabled` 변경 내용 확인

    ##### 위의 설정에서는 UseLargePages 플래그를 명시하지 말아야 한다.  명시되있는 경우 JVM은 전통적인 huge page를 사용하게 됨.


    #### 윈도우
      서버 버전에서만 사용가능. win7의 설정 방법

    - ##### command > mmc > snap-in 추가/삭제
    - ##### > Group Policy Object Editor > 로컬 컴퓨터 정책 확장
    - ##### > 컴퓨터 설정 > 윈도우 설정 > 보안 설정 > 로컬 정책과 사용자 권한 할당
    - ##### > 메모리에 페이지 고정하기 > 사용자 or 그룹 추가 > 재부팅


  - # 압축 일반 객체 포인터
    - ##### Ordinary Object Pointer(OOP)는 JVM이 객체 참조로 사용하는 핸들이다.
    - ##### 자바 7부터는 최대 힙 크기가 32GB 보다 작으면 압축 oop는 디폴트로 사용할 수 있으며 `-XX:+UseCompressedOops` 플래그로 활성화 할 수 있다.
