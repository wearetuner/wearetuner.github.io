---
layout: post
title:  "Chapter 02. 성능 테스트 접근법"
date:   2018-08-08 20:19:28 +0900
categories: java performance tuning
---
# 02. 성능 테스트 접근법

## 실제 어플리케이션을 테스트하자
### 1. 마이크로벤치마크
**매우 작은 단위의 성능을 측정하도록 설계된 테스트**
* 동기화 메서드 대비 비동기화 메서드 호출 시간
* 스레드 한개를 생성하거나 스레드 풀을 이용할 때 오버헤드
* 산술 알고리즘 한개배디 구현체 실행 시간

#### 반드시 직접적인 결과를 사용해야 한다
* 변수를 선언하고 읽지 않는 경우, 컴파일러가 계산값을 폐기 -> 반드시 결과값을 읽도록 하자
* 스레드 마이크로 벤치마크
 - [volatile 변수 사용 필요](http://thswave.github.io/java/2015/03/08/java-volatile.html)
 - volatile은 여러개 쓰레드에서 사용되는 변수의 변화에 대한 가시성 보장 (메인 메모리에 저장)
 - **(확인)** 실제 java8에서 parallel stream을 사용시 변경되는 변수에 volatile 필요한가?

#### 관련없는 동작을 포함해서는 안된다
* 테스트를 작성하는데 필요한 입력값을 생성하는 것을 테스트 실행시간에 포함시키는 실수를 범하지 않는다
* 입력값 생성은 미리 진행, 그 이후에 테스만 실행하도록 동작 분리한다

#### 정확한 입력 값을 측정해야 한다
* 테스트시 입력 값의 범위 한정 -> 일반적으로 기존 테스트보다 성능이 느려진다
* 하지만 입력 값의 범위를 넘어서는 경우 (예: 피보나치에서 입력값 범위를 넘어서는 값 입력시)
  먼저 입력값 범위를 체크하는 경우가 성능이 빠르다. 불필요한 재귀를 돌 필요가 없기 때문
* **준비기간(??)은 필수다. 그렇지 않으면 마이크로벤치마크는 컴파일 성능을 측정하게 된다.**
* **profile feedback**
 - 메서드를 컴파일할 때 쓸 최적화 방볍을 경정하기 위해 코드의 프로파일 피드백 사용
 - 자주 호출되는 메서드의 종류
 - 호출될때 스택의 깊이
 - (서브 클래스 포함) 인자(argument)의 실제 타입을 기반, 실제로 코드가 실행되는 환경에 따라 좌우된다

#### 실제 의미하는 바에 대한 이슈 존재
* 상황에 따라 중요할 수도 아닐 수도 있다. -> 상황에 따라 결정 필요
* 나노초 걸리는 작은 시간들도 합해지면 성능상 이슈가 되는 경우도 존재
 - 예: stream loop 돌면서 db 조회 -> 한방 조회로 변경
* 자주 일어나지 않는 요청에 대해 성능 최적화는 다른 작업에 필요한 시간을 버리는 일


### 2. 매크로벤치마크
어플리케이션 성능 측정하기에 가장 좋은 것은 **외부 자원을 포함한 어플리케이션** 자체다.
외부 자원을 제외하면 모듈 단위의 테스트에서는 괜찮을 수 있으나, 실제 성능 측정을 위해서는 포함해야 한다.

#### 외부 자원을 포함하여 테스트해야하는 이유?
#### 1) 복합적인 시스템
복합적인 시스템은 부분 요소들의 합 이상의 의미를 지닌다. 예상과 매우 다르게 동작한다.
CPU 파이프라인(??)과 캐쉬는 코드 경로가 긴 것보다 짧은 편이 더 효율적이다.
#### 2) 자원 할당 (resource allocation)
구성환경의 다른 측면을 개선시키지 않는 한 비지니스 로직을 개선시키려는 다른 시도는 허사가 될 수 있다.
* 예: DB 처리량이 100RPS면 비지니스 로직을 개선한다고 하더라도, 시스템 총 처리량은 100RPS로 변함없다
* 예: MSA G/W -> Rest Api server 블럭킹 / 논블럭킹

** 전체 어플리케이션을 대상으로 테스트 하지 않으면, 성능을 위해 어느 영역에 시간을 써야 결실을 얻을 수 있을지 불가능하다. **
* **(확인)** 로컬에서 성능 검사 vs 서버에서 성능 검사
* ** [Pinpoint 설명](https://github.com/naver/pinpoint) **


### 3. 메조벤치마크
**개념적 위치는 마이크로벤치마크 < 메조벤치마크 < 매크로벤치마크  사이에 위치 한다.** 실제 작업 일부를 수행하기는 하지만, 완전한 형태를 갖추지 않은 어플리케이션의 벤치마크를 가리길때 사용한다.

* 예: 소켓 관리 코드, 요청을 읽어들이는 코드, JSP를 찾는 코드, 응답을 읽는 코드
* 마이크로벤치마크가 아니다. 실제 마이크로벤치마크가 대상으로 하는 개념보다 크다.
* 매크로벤치마크가 아니다. 사용자 로그인 없고, 세션 관리 없다. 즉, 다른 복합적인 부분을 배제했다

#### 장점
* 마이크로벤치마크보다 위험 요소가 적고, 매크로벤치마크보다 작업하기 쉽다
* 컴파일러에 의해 최적화 가능하다
* 불필요한 코드(dead code)를 많이 포함할 가능성이 적다
* 예: 아래 서버 2대의 성능비교

|    Test     | Server 1 | Server 2 |
|-------------|----------|----------|
| simple jsp  | 19ms     | 50ms     |
| session jsp | 75ms     | 50ms     |

#### 전체 범위의 어플리케이션을 테스트하는데 합리적인 대안 제시가 가능하다
마이크로벤치마크 것보다 실제 어플리케이션에 더 가깝다. 자동 테스트 특히 모듈 단계에 좋다.

#### **(확인) Test Case와 대응해서 생각해보자**
Test Case는 우리가 작성한 코드나 제품에 대한 검증이 목적이고, **벤치마크는 어플리케이션에 대한 성능 테스트가 목적이다.**

* Unit Test == 마이크로벤치마크
* Api Test == 메조벤치마크
* Integration Test == 매크로벤치마크
