---
layout: post
title:  "Chapter 04. JIT 컴파일러로 작업하기"
date:   2018-08-07 20:20:28 +0900
categories: java performance tuning
---

# 04. JIT 컴파일러로 작업하기

CPU는 어셈블리 or 바이너리코드(컴파일코드)를 실행할 수 있다.

## 프로그래밍 언어의 종류

프로그래밍 언어는 크게 2가지로 나뉘게 된다

### 1. C++, 포트란 - 컴파일형 언어

컴파일형 언어이고 바이너리 코드로 실행된다.
코드를 작성한 다음 정적컴파일러로 바이너리코드로 생성된다.
CPU에 의존적이다.

### 2. PHP, Perl - 인터프린터 언어

- 런타임중에 프로그램 한줄한줄을 해석하며 실행한다.
- 인터프린트 언어이고 어떤 CPU에서든 인터프린터를 가지고 있다면 실행이 가능하며 이식성이 높다.
- 인터프리티드 언어는 특별한 플랫폼 의존성을 가질 필요가 없다. 
- 실행중에 ‘interpreted’ 되므로, 적절한 interpreter(JAVA에서는 VM)만 있다면 어떤 기종에서도 잘 실행될 수 있는 것이다. 
- 이런 이유로 인터프리티드 언어는 보다 더 크로스플랫폼적 성격을 갖게 된다.
- 하지만 루프내에서 실행이 되는 경우 성능이 좋지 않다.

## Just In Time Compiler

- 자바는 컴파일형 언어, 인터프린터 언어를 절충하여 수행된다.
- 컴파일 되지만 최적화된 어셈블리 언어로 컴파일 된다.(자바 바이너리로 구동)
- 실행하면서 코드를 플랫폼 바이너리로 컴파일 된다.
- 프로그램이 실행되면서 컴파일이 수행된다고 하여 Just In Time 컴파일러로 부른다.
- 자바 가상머신이 실행되는 도중 코드를 컴파일 한다.

### 1. 서버 (-server)

컴파일 시작하기전 얻게되는 정보로 인해 더 나은 최적화가 적용 가능하다.
결국 서버컴파일러가 만든 코드가 더 빠를 것이다.

### 2.클라이언트 (-client)

서버컴파일러 보다 먼저 컴파일 한다.
서버컴파일러보다 더 많은 코드를 컴파일 할 수 있다.
코드가 실행되기 시작하는 동안 더 빠르다.
빠른 스타트업이 주 목적인 경우 사용한다.

### 3.티어드컴파일

JVM이 시작할때는 클라이언트 컴파일을 사용
코드가 많이 호출되면 서버컴파일을 사용
자바7에서는 불안정 하였지만 자바8에서는 사용가능
튜닝관점에서는 티어드컴파일을 사용하는 것이 좋다.
이용하기 위해서는 
1. -server플래그를 사용하여 서버컴파일러를 명시하고
2. -XX:+TieredCompilation 플래그 추가하여 사용한다
